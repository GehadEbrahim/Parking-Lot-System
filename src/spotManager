import java.io.*;
import java.util.*;

public class spotManager {
    public List<Spot> loadSpots(String filePath) throws IOException {
        List<Spot> spots = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.trim().isEmpty() || line.trim().startsWith("/")) {
                    continue;
                }

                String[] parts = line.split(",");
                try {
                    int spotId = Integer.parseInt(parts[0].trim()); // Integer.parseInt to convert String to Integer
                    String type = parts[1].trim();
                    double fees = Double.parseDouble(parts[2].trim());

                    // Creating Spot object and adding to the list
                    spots.add(new Spot(type, spotId, fees)); // Add Spot to the list
                } catch (NumberFormatException e) {
                    System.out.println("Error parsing line: " + line);
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading the file: " + filePath);  // Changed to use the provided filePath
            throw e;
        }
        return spots;
    }

    public void displayAvailableSpots(List<Spot> spots) {
        System.out.println("Spot ID       Spot Type       Fees");
        for (Spot spot : spots) {
            if (spot.getId() != 0) {  // Assuming spot ID 0 means empty or invalid spot
                System.out.println(spot.getDetails());
            }
        }
    }

    public void displaySpots(List<Spot> spots){
        for (int i = 0; i < spots.size(); i++) {
            System.out.println((i + 1) + ") " + spots.get(i).getDetails());
        }
    }

    public Spot getSpotById(List<Spot> spots, int spotId) {
        for (Spot spot : spots) {
            if (spot.getId() == spotId) {
                return spot;
            }
        }
        return null;  // If no spot found, return null
    }

    public void deleteSpot(List<Spot> spots, int spotId) {
        spots.removeIf(spot -> spot.getId() == spotId);  // Remove the spot by ID
    }
}
