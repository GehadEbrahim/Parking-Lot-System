import java.io.*;
import java.util.*;

public class ReservationManager {
    Scanner in  = new Scanner(System.in);
    public List<Reservation> loadReservations(String filePath) throws IOException {
        List<Reservation> reservations = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(FilePaths.RESERVATIONS_FILE_PATH))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.trim().isEmpty() || line.trim().startsWith("#")) {
                    continue;
                }

                String[] parts = line.split(",");
                try {
                    String ownerName = parts[0].trim();
                    int spotId = Integer.parseInt(parts[1].trim());
                    int slotId = Integer.parseInt(parts[2].trim());
                    //Add the reservation to the list
                    reservations.add (new Reservation( ownerName ,spotId , slotId));

                } catch (NumberFormatException e) { //Error when you try to convert from a data type to another
                    System.out.println("Error parsing line: " + line);
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading the file: " + filePath);
            throw e;
        }
        return reservations;
    }
    public void reservation() throws IOException {
        System.out.println("1) View my reservations");
        System.out.println("2) Make reservation");
        System.out.println("3) Update reservation");
        System.out.println("4) Cancel reservation\n==>");
        int reservationMenuChoice = in.nextInt();

        switch ((reservationMenuChoice)){
            case 1:
                //displayReservedReservations()
                break;
            case 2:
                spotManager spot = new spotManager();
                List<Spot> spots = spot.loadSpots(FilePaths.SPOTS_FILE_PATH);
                spot.displayAvailableSpots(spots);
                System.out.print("Which spot you want to reserve?\n==>");
                int spotChoice = in.nextInt();
                slotManager slot = new slotManager();
                List<Slot> slots = slot.loadSlots(FilePaths.SLOTS_FILE_PATH);
                slot.displayAvailableSlots(slots , spotChoice);
                System.out.print("Which slot you want to reserve?\n==>");
                int slotChoice = in.nextInt();
                makeReservation(spotChoice , slotChoice);
                System.out.print("Done");
                break;
        }
    }
    public void makeReservation(int spotID , int slotID){
        Spot spot = new Spot();
        Slot slot = new Slot();
        spot.setId(spotID);
        slot.setSlotID(slotID);
        spot.setSpotReserved(true);
        slot.setReserved(true);
    }
}
